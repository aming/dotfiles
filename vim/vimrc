" A vimrc file for AMing
"
" Maintainer:	AMing (cyberming at gmail dot com)
" Last change:	2012 Nov 16
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

filetype off                   " required!
set rtp+=~/dotfiles/vim/bundle/vundle/
set rtp+=~/dotfiles/vim/bundle/vundle/myBundle
call vundle#rc("~/dotfiles/vim/bundle/myBundle")

" let Vundle manage Vundle required! 
Bundle 'gmarik/vundle'
" My Bundles here:
" original repos on github

""""""""""""""""""""""""""""""
" NERDTree
""""""""""""""""""""""""""""""
Bundle 'scrooloose/nerdtree'
let NERDTreeWinSize = 35
map <f2> :NERDTreeToggle<cr>
imap <f2> <esc>:NERDTreeToggle<cr>i
if has("autocmd") 
  autocmd vimenter * if !argc() | NERDTree | endif  "open a NERDTree automatically when vim starts up if no files were specified
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif    "close vim if the only window left open is a NERDTree
endif " has("autocmd")

""""""""""""""""""""""""""""""
" plugins from tpope
""""""""""""""""""""""""""""""
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-rails'

""""""""""""""""""""""""""""""
" vim-powerline
""""""""""""""""""""""""""""""
Bundle 'Lokaltog/vim-powerline'
let g:Powerline_symbols = 'fancy'

""""""""""""""""""""""""""""""
" vim-cpp
""""""""""""""""""""""""""""""
Bundle 'Rip-Rip/clang_complete'
let g:clang_user_options='|| exit 0'

""""""""""""""""""""""""""""""
" taglist
""""""""""""""""""""""""""""""
Bundle 'vim-scripts/taglist.vim'
" For Taglist
" configure tags - add additional tags here or comment out not-used ones
" set tags+=./ctags;,~/.vim/tags/cpp,~/.vim/tags/cpp_boost
" set tags+=./ctags;,~/.vim/tags/cpp,~/vimfiles/tags/cpp
" build tags of your own project with CTRL+F12
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+qf .<CR>

""""""""""""""""""""""""""""""
" vim-java
""""""""""""""""""""""""""""""
Bundle 'Vim-JDE'
"Bundle 'vim-scripts/javacomplete'
"if has("autocmd") 
"  autocmd Filetype java setlocal omnifunc=javacomplete#Complete 
"  autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo
"endif " has("autocmd")

""""""""""""""""""""""""""""""
" vim-ruby
""""""""""""""""""""""""""""""
Bundle 'vim-ruby/vim-ruby'
let g:Powerline_symbols = 'fancy'

""""""""""""""""""""""""""""""
" Command-T
""""""""""""""""""""""""""""""
Bundle 'wincent/Command-T'

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup        " do not keep a backup file, use versions instead
set history=50      " keep 50 lines of command line history
set number          " Show Line Number
set ruler           " show the cursor position all the time
set showcmd         " display incomplete commands
set showmatch       " Show matching brackets.
set incsearch       " do incremental searching
"set ignorecase     " Do case insensitive matching
"set smartcase      " Do smart case matching
"set autowrite      " Automatically save before commands like :next and :make
"set hidden         " Hide buffers when they are abandoned

" setting for the tab space
set tabstop=2
set shiftwidth=2
set expandtab

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
  " Right Click to enter and exit insertiong mode
  " From Tips 843
  imap <RightMouse> <Esc>
  nmap <RightMouse> i<LeftMouse>
endif

" Vim5 and later versions support syntax highlighting. Uncommenting the
" following enable syntax highlighting on, if the terminal has colors
" and also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  colorscheme vividchalk  " Set Color Scheme
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") |
          \   exe "normal! g`\"" |
          \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif

""""""""""""""""""""""""""""""
" BufExplorer
""""""""""""""""""""""""""""""
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
if has("autocmd") 
  autocmd BufWinEnter \[Buf\ List\] setl nonumber 
endif " has("autocmd")

""""""""""""""""""""""""""""""
" winManager setting
""""""""""""""""""""""""""""""
let g:winManagerWindowLayout = "BufExplorer,FileExplorer|TagList"
let g:winManagerWidth = 30
let g:defaultExplorer = 1
nmap <C-W><C-F> :FirstExplorerWindow<cr>
nmap <C-W><C-B> :BottomExplorerWindow<cr>
nmap <silent> <leader>wm :WMToggle<cr> 

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

